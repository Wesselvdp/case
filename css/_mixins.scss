// _mixins.scss

@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
     -moz-border-radius: $radius;
      -ms-border-radius: $radius;
          border-radius: $radius;
}

// serving retina image backgrounds
@mixin imgRetina($image, $extension, $width, $height, $posx, $posy, $repeat: no-repeat) {
     background: url('../Assets/' + $image + '.' + $extension) $repeat $posx $posy;
          
     @media 
     screen and (-webkit-min-device-pixel-ratio: 2),
     screen and (   min--moz-device-pixel-ratio: 2),
     screen and (   -moz-min-device-pixel-ratio: 2),
     screen and (     -o-min-device-pixel-ratio: 2/1),
     screen and (        min-device-pixel-ratio: 2),
     screen and (             min-resolution: 192dpi), 
     screen and (             min-resolution: 2dppx) {    
        background: url('../Assets/' + $image + '@2x' + '.' + $extension) $repeat $posx $posy;
        background-size: $width $height;
     }
}

// serving retina image backgrounds with gradient
@mixin imgRetinaGradient($image, $extension, $width, $height, $posx, $posy, $repeat: no-repeat) {
     background: 
		 linear-gradient(
		 rgba(255, 73, 41, 0.45), 
		 rgba(255, 73, 41, 0.45)
     ),
		 url('../Assets/' + $image + '.' + $extension) $repeat $posx $posy;
          
     @media 
     screen and (-webkit-min-device-pixel-ratio: 2),
     screen and (   min--moz-device-pixel-ratio: 2),
     screen and (   -moz-min-device-pixel-ratio: 2),
     screen and (     -o-min-device-pixel-ratio: 2/1),
     screen and (        min-device-pixel-ratio: 2),
     screen and (             min-resolution: 192dpi), 
     screen and (             min-resolution: 2dppx) {    
        background: 
		 linear-gradient(
		 rgba(255, 73, 41, 0.45), 
		 rgba(255, 73, 41, 0.45)
     ),
			url('../Assets/' + $image + '@2x' + '.' + $extension) $repeat $posx $posy;
        background-size: $width $height;
     }
}

// For converting pixels from design to em
$browser-context: 16;

// unitless function to convert px to em
@function em($pixels, $context: $browser-context) {
  @if (unitless($pixels)) {
    $pixels: $pixels * 1px;
  }
  @if (unitless($context)) {
    $context: $context * 1px;
  }
  @return $pixels / $context * 1em;
}